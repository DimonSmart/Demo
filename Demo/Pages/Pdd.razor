@page "/pdd"
@using Demo.Components
@using Demo.Demos.Common
@using Demo.Demos.Pdd
@using Demo.Demos.Pdd.Components
@using System.Text.Json
@using System.Text
@using Demo.Services
@using System.Text.RegularExpressions
@using Markdig
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components

@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject UserPreferencesStorageService<PddUserPreferences> PreferencesStorage
@inject PageTitleService PageTitleService
@inject CardStorageService CardStorage
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime

<link rel="stylesheet" href="css/pdd.css" />
<link rel="stylesheet" href="css/demos.css" />

<div class="pdd-page-container"
     @onkeydown="HandleKeyDown"
     @onpointerdown="HandlePointerDown"
     @onpointerup="HandlePointerUp"
     tabindex="0">
    <div class="pdd-top-nav-bar fixed-top-bar">
        <StatisticsDisplay QuestionQueue="@questionQueue" OnResetProgress="ResetProgress" />

        <div class="pdd-options">
            <div class="pdd-highlight-toggle">
                <input type="checkbox"
                       id="highlightTermsToggle"
                       checked="@highlightTerms"
                       @onchange="@OnHighlightTermsChanged"
                       title="Highlight key terms?" />
                <label for="highlightTermsToggle"
                       title="Turn ON/OFF terms highlighting">
                    Terms
                </label>
            </div>            <div class="pdd-language-selector">
                <LanguagePicker 
                    Language="@primaryLanguage"
                    OnLanguageChanged="@OnPrimaryLanguageChanged" />
            </div>
        </div>
    </div>

    <div class="pdd-content">
        @if (IsLoading)
        {
            <div>Please wait. Exam data is loading (around 10 seconds)</div>
            <div class="pdd-loading-bar-container">
                <div class="pdd-loading-bar"></div>
            </div>
        }
        else if (currentBatch.Any())
        {
            @foreach (var questionWrapper in currentBatch)
            {
                <QuestionDisplay QuestionWrapper="@questionWrapper"
                                 OnAnswerSelected="@AnswerQuestion"
                                 RenderLocalizedText="@RenderLocalizedText" />
            }

            <BatchNavigation AllQuestionsAnswered="@AllQuestionsInBatchAnswered"
                             OnNextBatchClicked="@GoToNextBatch" />
        }
        else
        {
            <p>All questions have been learned! Congratulations!</p>
        }
    </div>
</div>

@code {
    private const int BATCH_SIZE = 10;
    private List<QuestionWrapper> currentBatch = new();
    private bool AllQuestionsInBatchAnswered => currentBatch.All(q => q.HasAnswered);

    private IReadOnlyCollection<QuestionItem> allQuestions = new List<QuestionItem>();
    const string ExamDataBaseAddress = @"https://DimonSmart.github.io/DGT/";
    private readonly MarkdownPipeline markdownPipeline = new MarkdownPipelineBuilder()
        .UseAdvancedExtensions()
        .Build();    private bool IsLoading = true;
    private bool highlightTerms = false;
    
    // Language selection model
    private string primaryLanguage = "es"; // Default to Spanish
    private string secondaryLanguage1 = "en";
    private string secondaryLanguage2 = "ru";
    private bool showSecondaryLanguage1 = false;
    private bool showSecondaryLanguage2 = false;

    private QuestionQueue questionQueue = new QuestionQueue(new List<QuestionStudyCard>());
    private double pointerDownX;
    private double pointerDownY;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        PageTitleService.SetTitle("Practice DGT Spanish Driving Theory Test");
    }    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var savedPreferences = await PreferencesStorage.LoadPreferencesAsync();
        if (savedPreferences != null)
        {
            highlightTerms = savedPreferences.HighlightTerms;
            primaryLanguage = savedPreferences.PrimaryLanguage;
            UpdateTranslationLanguages();
        }

        allQuestions = await LoadQuestions();
        questionQueue = await LoadQuestionsQueue(allQuestions);
        LoadNextBatch();
        IsLoading = false;
    }    private async Task OnLanguagesChanged((bool Russian, bool Spanish, bool English) newValues)
    {
        // Этот метод больше не используется, но оставлен для совместимости
        await Task.CompletedTask;
    }

    private async Task OnHighlightTermsChanged(ChangeEventArgs e)
    {
        if (e.Value is bool boolValue)
        {
            highlightTerms = boolValue;
        }
        else if (bool.TryParse(e.Value?.ToString(), out var parsed))
        {
            highlightTerms = parsed;
        }
        else
        {
            highlightTerms = false;
        }

        await SaveUserPreferencesAsync();
    }    private string RenderLocalizedText(LocalizedText text, List<LocalizedText>? questionTerms = null)
    {
        var sb = new StringBuilder();

        // Get the primary language content
        string primaryContent = GetLocalizedContent(text, primaryLanguage, questionTerms);
        if (string.IsNullOrEmpty(primaryContent))
            return string.Empty;

        // Add the primary content
        sb.AppendLine($"<div class='pdd-language-block pdd-{primaryLanguage}'>");
        sb.AppendLine(primaryContent);
        sb.AppendLine("</div>");
        
        // Add translation buttons for secondary languages
        if (!string.IsNullOrEmpty(secondaryLanguage1) || !string.IsNullOrEmpty(secondaryLanguage2))
        {
            sb.AppendLine("<div class='pdd-translation-buttons'>");
              if (!string.IsNullOrEmpty(secondaryLanguage1))
            {
                // Use a common ID for button and translation div
                string uniqueId1 = $"lang-{Guid.NewGuid():N}";
                string btnId1 = $"btn-{uniqueId1}";
                string transId1 = $"trans-{uniqueId1}";
                
                // Add the translation button
                sb.AppendLine($"<button id='{btnId1}' class='pdd-trans-btn' onclick=\"document.getElementById('{btnId1}').classList.toggle('active'); document.getElementById('{transId1}').classList.toggle('show')\">{secondaryLanguage1.ToUpper()}</button>");
            }
            
            if (!string.IsNullOrEmpty(secondaryLanguage2))
            {
                // Use a common ID for button and translation div
                string uniqueId2 = $"lang-{Guid.NewGuid():N}";
                string btnId2 = $"btn-{uniqueId2}";
                string transId2 = $"trans-{uniqueId2}";
                
                // Add the translation button
                sb.AppendLine($"<button id='{btnId2}' class='pdd-trans-btn' onclick=\"document.getElementById('{btnId2}').classList.toggle('active'); document.getElementById('{transId2}').classList.toggle('show')\">{secondaryLanguage2.ToUpper()}</button>");
            }
            
            sb.AppendLine("</div>");
            
            // Add secondary language 1 content (initially hidden)
            if (!string.IsNullOrEmpty(secondaryLanguage1))
            {
                string translationContent1 = GetLocalizedContent(text, secondaryLanguage1, questionTerms);
                if (!string.IsNullOrEmpty(translationContent1))
                {
                    string uniqueId1 = $"lang-{Guid.NewGuid():N}";
                    string transId1 = $"trans-{uniqueId1}";
                    sb.AppendLine($"<div id='{transId1}' class='pdd-translation-content pdd-{secondaryLanguage1} {(showSecondaryLanguage1 ? "show" : "")}'>");
                    sb.AppendLine(translationContent1);
                    sb.AppendLine("</div>");
                }
            }
            
            // Add secondary language 2 content (initially hidden)
            if (!string.IsNullOrEmpty(secondaryLanguage2))
            {
                string translationContent2 = GetLocalizedContent(text, secondaryLanguage2, questionTerms);
                if (!string.IsNullOrEmpty(translationContent2))
                {
                    string uniqueId2 = $"lang-{Guid.NewGuid():N}";
                    string transId2 = $"trans-{uniqueId2}";
                    sb.AppendLine($"<div id='{transId2}' class='pdd-translation-content pdd-{secondaryLanguage2} {(showSecondaryLanguage2 ? "show" : "")}'>");
                    sb.AppendLine(translationContent2);
                    sb.AppendLine("</div>");
                }
            }
        }
        
        return sb.ToString();
    }
    
    private string GetLocalizedContent(LocalizedText text, string languageCode, List<LocalizedText>? questionTerms)
    {
        string content = "";
        
        // Get content for the requested language
        if (languageCode == "en" && !string.IsNullOrWhiteSpace(text.English))
            content = text.English;
        else if (languageCode == "es" && !string.IsNullOrWhiteSpace(text.Spanish))
            content = text.Spanish;
        else if (languageCode == "ru" && !string.IsNullOrWhiteSpace(text.Russian))
            content = text.Russian;
            
        if (string.IsNullOrEmpty(content))
            return string.Empty;
            
        // Apply term highlighting if needed
        if (highlightTerms && questionTerms != null && questionTerms.Any())
        {
            if (languageCode == "ru")
                content = HighlightAllTerms(content, questionTerms, term => term.Russian);
            else if (languageCode == "es")
                content = HighlightAllTerms(content, questionTerms, term => term.Spanish);
            else if (languageCode == "en")
                content = HighlightAllTerms(content, questionTerms, term => term.English);
        }
        
        // Convert markdown to HTML
        return Markdown.ToHtml(content, markdownPipeline);
    }

    private string HighlightAllTerms(
        string originalText,
        List<LocalizedText> terms,
        Func<LocalizedText, string> selectTermText)
    {
        var result = originalText;

        for (int i = 0; i < terms.Count && i < termColors.Length; i++)
        {
            var term = selectTermText(terms[i]);
            if (string.IsNullOrWhiteSpace(term))
                continue;

            var pattern = $"\\b{Regex.Escape(term)}\\b";
            var color = termColors[i];

            result = Regex.Replace(
                result,
                pattern,
                match => $"<span style=\"font-weight:bold; color:{color}\">{match.Value}</span>",
                RegexOptions.IgnoreCase
            );
        }

        return result;
    }

    private void HandleKeyDown(KeyboardEventArgs e)
    {
        if (int.TryParse(e.Key, out int answerIndex) && answerIndex >= 1 && answerIndex <= 4)
        {
            var targetQuestion = currentBatch.FirstOrDefault(q => !q.HasAnswered);
            if (targetQuestion != null && answerIndex <= targetQuestion.Question.Answers.Count)
            {
                var chosenAnswer = targetQuestion.Question.Answers[answerIndex - 1];
                _ = AnswerQuestion((targetQuestion, chosenAnswer));
            }
        }
    }

    private void HandlePointerDown(PointerEventArgs e)
    {
        pointerDownX = e.ClientX;
        pointerDownY = e.ClientY;
    }

    private void HandlePointerUp(PointerEventArgs e)
    {
        var deltaX = e.ClientX - pointerDownX;
        var deltaY = e.ClientY - pointerDownY;

        if (Math.Abs(deltaX) > 100 && Math.Abs(deltaY) < 50 && AllQuestionsInBatchAnswered)
        {
            GoToNextBatch();
        }
    }

    internal async Task<IReadOnlyCollection<QuestionItem>> LoadQuestions()
    {
        try
        {
            var response = await HttpClient.GetAsync("https://DimonSmart.github.io/DGT/pdd.json");
            response.EnsureSuccessStatusCode();
            var json = await response.Content.ReadAsStreamAsync();
            return await JsonSerializer.DeserializeAsync<List<QuestionItem>>(json) ?? new List<QuestionItem>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading questions: {ex.Message}");
            return new List<QuestionItem>();
        }
    }

    internal async Task<QuestionQueue> LoadQuestionsQueue(IReadOnlyCollection<QuestionItem> questions)
    {
        var cardSet = await CardStorage.LoadCardsAsync();
        if (cardSet != null)
            return new QuestionQueue(cardSet.Cards);
        return new QuestionQueue(questions.Select(q => new QuestionStudyCard { Id = q.Id }));
    }

    private void LoadNextBatch()
    {
        currentBatch.Clear();
        var nextCards = questionQueue.PeekNextQuestionsForStudy(BATCH_SIZE);

        foreach (var studyCard in nextCards)
        {
            var question = allQuestions.FirstOrDefault(q => q.Id == studyCard.Id);
            if (question != null)
            {
                currentBatch.Add(new QuestionWrapper
                    {
                        Question = question,
                        StudyCard = studyCard,
                        HasAnswered = false,
                        ShowExplanation = false
                    });
            }
        }
    }

    private async Task AnswerQuestion((QuestionWrapper wrapper, AnswerItem selectedAnswer) answer)
    {
        var (wrapper, selectedAnswer) = answer;
        if (wrapper.HasAnswered) return;

        wrapper.SelectedAnswer = selectedAnswer;
        wrapper.HasAnswered = true;
        questionQueue.ProcessAnswer(wrapper.StudyCard, wrapper.SelectedAnswer.IsCorrect);
        await CardStorage.SaveCardsAsync(new StoredCardsSet() { Cards = questionQueue.Cards, Version = "1.0" });

        StateHasChanged();
    }
    private void GoToNextBatch()
    {
        if (!AllQuestionsInBatchAnswered) return;
        LoadNextBatch();
    }

    private async Task ResetProgress()
    {
        await CardStorage.ResetProgressAsync();
        allQuestions = await LoadQuestions();
        questionQueue = await LoadQuestionsQueue(allQuestions);
        LoadNextBatch();
        StateHasChanged();
    }    private async Task SaveUserPreferencesAsync()
    {
        var preferences = new PddUserPreferences
        {
            HighlightTerms = highlightTerms,
            PrimaryLanguage = primaryLanguage
        };
        await PreferencesStorage.SavePreferencesAsync(preferences);
    }

    // A set of dark colors used for highlighting different terms
    private static readonly string[] termColors = new[]
    {
        "#8B008B", // DarkMagenta
        "#800000", // Maroon
        "#004080", // Dark blue
        "#808000", // Olive
        "#400080"  // Another dark shade
    };
    
    // Bridge method that forwards language selections to OnPrimaryLanguageChanged
    private Task OnLanguagesUpdated((string Primary, string Secondary1, string Secondary2) languages)
    {
        return OnPrimaryLanguageChanged(languages);
    }
    
    private void UpdateTranslationLanguages()
    {
        // Determine which languages are available for translation based on primary language
        var availableLanguages = new List<string>();
        
        if (primaryLanguage != "en") availableLanguages.Add("en");
        if (primaryLanguage != "es") availableLanguages.Add("es");
        if (primaryLanguage != "ru") availableLanguages.Add("ru");
        
        // Set secondary languages
        secondaryLanguage1 = availableLanguages.Count > 0 ? availableLanguages[0] : "";
        secondaryLanguage2 = availableLanguages.Count > 1 ? availableLanguages[1] : "";
    }
    
    private async Task OnPrimaryLanguageChanged((string Primary, string Secondary1, string Secondary2) languages)
    {
        primaryLanguage = languages.Primary;
        secondaryLanguage1 = languages.Secondary1;
        secondaryLanguage2 = languages.Secondary2;
        
        // Reset translation toggles when primary language changes
        showSecondaryLanguage1 = false;
        showSecondaryLanguage2 = false;
        
        StateHasChanged();
        await SaveUserPreferencesAsync();
    }    private Task OnShowTranslation1Changed(bool value)
    {
        showSecondaryLanguage1 = value;
        StateHasChanged();
        return Task.CompletedTask;
    }
    
    private Task OnShowTranslation2Changed(bool value)
    {
        showSecondaryLanguage2 = value;
        StateHasChanged();
        return Task.CompletedTask;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Initialize JavaScript for the translation buttons
            await JSRuntime.InvokeVoidAsync("eval", @"
                window.toggleTranslation = function(contentId) {
                    const content = document.getElementById(contentId);
                    if (content) {
                        content.classList.toggle('show');
                    }
                }
            ");
        }
    }
}
