@page "/pdd"
@using Demo.Demos.Common
@using Demo.Demos.Pdd
@using Demo.Demos.Pdd.Components
@using System.Text.Json
@using Demo.Services
@using Microsoft.AspNetCore.Components.Web

@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject UserPreferencesStorageService<PddUserPreferences> PreferencesStorage
@inject PageTitleService PageTitleService
@inject CardStorageService CardStorage
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime
@inject TextTranslationService TranslationService

<link rel="stylesheet" href="css/pdd.css" />
<link rel="stylesheet" href="css/demos.css" />
<link rel="stylesheet" href="css/multilanguage.css" />

<div class="pdd-page-container"
     @onkeydown="HandleKeyDown"
     @onpointerdown="HandlePointerDown"
     @onpointerup="HandlePointerUp"
     tabindex="0">
    <div class="pdd-top-nav-bar fixed-top-bar">
        <StatisticsDisplay QuestionQueue="@questionQueue" OnResetProgress="ResetProgress" />

        <div class="pdd-options">
            <div class="pdd-highlight-toggle">
                <input type="checkbox"
                       id="highlightTermsToggle"
                       checked="@highlightTerms"
                       @onchange="@OnHighlightTermsChanged"
                       title="Highlight key terms?" />
                <label for="highlightTermsToggle"
                       title="Turn ON/OFF terms highlighting">
                    Terms
                </label>
            </div>
            <div class="pdd-language-selector">
                <LanguagePicker PrimaryLanguage="@primaryLanguage"
                                OnLanguageChanged="@OnLanguageChanged" />
            </div>
        </div>
    </div>

    <div class="pdd-content">
        @if (IsLoading)
        {
            <div>Please wait. Exam data is loading (around 10 seconds)</div>
            <div class="pdd-loading-bar-container">
                <div class="pdd-loading-bar"></div>
            </div>
        }
        else if (currentBatch.Any())
        {            @foreach (var questionWrapper in currentBatch)
            {
                <QuestionDisplay QuestionWrapper="@questionWrapper"
                                 OnAnswerSelected="@AnswerQuestion"
                                 PrimaryLanguage="@primaryLanguage"
                                 SecondaryLanguage1="@secondaryLanguage1"
                                 SecondaryLanguage2="@secondaryLanguage2"
                                 HighlightTerms="@highlightTerms" />
            }

            <BatchNavigation AllQuestionsAnswered="@AllQuestionsInBatchAnswered"
                             OnNextBatchClicked="@GoToNextBatch" />
        }
        else
        {
            <p>All questions have been learned! Congratulations!</p>
        }
    </div>
</div>

@code {
    private const int BATCH_SIZE = 10;
    private List<QuestionWrapper> currentBatch = new();
    private bool AllQuestionsInBatchAnswered => currentBatch.All(q => q.HasAnswered);

    private IReadOnlyCollection<QuestionItem> allQuestions = new List<QuestionItem>();
    const string ExamDataBaseAddress = @"https://DimonSmart.github.io/DGT/";
    
    private bool IsLoading = true;
    private bool highlightTerms = false;

    // Language selection model
    private string primaryLanguage = "es";
    private string secondaryLanguage1 = "en";
    private string secondaryLanguage2 = "ru";

    private QuestionQueue questionQueue = new QuestionQueue(new List<QuestionStudyCard>());
    private double pointerDownX;
    private double pointerDownY;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        PageTitleService.SetTitle("Practice DGT Spanish Driving Theory Test");
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var savedPreferences = await PreferencesStorage.LoadPreferencesAsync();
        if (savedPreferences != null)
        {
            highlightTerms = savedPreferences.HighlightTerms;
            primaryLanguage = savedPreferences.PrimaryLanguage;
            UpdateSecondaryLanguages();
        }

        allQuestions = await LoadQuestions();
        questionQueue = await LoadQuestionsQueue(allQuestions);
        LoadNextBatch();
        IsLoading = false;
    }

    private async Task OnHighlightTermsChanged(ChangeEventArgs e)
    {
        if (e.Value is bool boolValue)
        {
            highlightTerms = boolValue;
        }
        else if (bool.TryParse(e.Value?.ToString(), out var parsed))
        {
            highlightTerms = parsed;
        }
        else
        {
            highlightTerms = false;
        }

        await SaveUserPreferencesAsync();
    }

    private void HandleKeyDown(KeyboardEventArgs e)
    {
        if (int.TryParse(e.Key, out int answerIndex) && answerIndex >= 1 && answerIndex <= 4)
        {
            var targetQuestion = currentBatch.FirstOrDefault(q => !q.HasAnswered);
            if (targetQuestion != null && answerIndex <= targetQuestion.Question.Answers.Count)
            {
                var chosenAnswer = targetQuestion.Question.Answers[answerIndex - 1];
                _ = AnswerQuestion((targetQuestion, chosenAnswer));
            }
        }
    }

    private void HandlePointerDown(PointerEventArgs e)
    {
        pointerDownX = e.ClientX;
        pointerDownY = e.ClientY;
    }

    private void HandlePointerUp(PointerEventArgs e)
    {
        var deltaX = e.ClientX - pointerDownX;
        var deltaY = e.ClientY - pointerDownY;

        if (Math.Abs(deltaX) > 100 && Math.Abs(deltaY) < 50 && AllQuestionsInBatchAnswered)
        {
            GoToNextBatch();
        }
    }

    internal async Task<IReadOnlyCollection<QuestionItem>> LoadQuestions()
    {
        try
        {
            var response = await HttpClient.GetAsync("https://DimonSmart.github.io/DGT/pdd.json");
            response.EnsureSuccessStatusCode();
            var json = await response.Content.ReadAsStreamAsync();
            return await JsonSerializer.DeserializeAsync<List<QuestionItem>>(json) ?? new List<QuestionItem>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading questions: {ex.Message}");
            return new List<QuestionItem>();
        }
    }

    internal async Task<QuestionQueue> LoadQuestionsQueue(IReadOnlyCollection<QuestionItem> questions)
    {
        var cardSet = await CardStorage.LoadCardsAsync();
        if (cardSet != null)
            return new QuestionQueue(cardSet.Cards);
        return new QuestionQueue(questions.Select(q => new QuestionStudyCard { Id = q.Id }));
    }

    private void LoadNextBatch()
    {
        currentBatch.Clear();
        var nextCards = questionQueue.PeekNextQuestionsForStudy(BATCH_SIZE);

        foreach (var studyCard in nextCards)
        {
            var question = allQuestions.FirstOrDefault(q => q.Id == studyCard.Id);
            if (question != null)
            {
                currentBatch.Add(new QuestionWrapper
                    {
                        Question = question,
                        StudyCard = studyCard,
                        HasAnswered = false,
                        ShowExplanation = false
                    });
            }
        }
    }

    private async Task AnswerQuestion((QuestionWrapper wrapper, AnswerItem selectedAnswer) answer)
    {
        var (wrapper, selectedAnswer) = answer;
        if (wrapper.HasAnswered) return;

        wrapper.SelectedAnswer = selectedAnswer;
        wrapper.HasAnswered = true;
        questionQueue.ProcessAnswer(wrapper.StudyCard, wrapper.SelectedAnswer.IsCorrect);
        await CardStorage.SaveCardsAsync(new StoredCardsSet() { Cards = questionQueue.Cards, Version = "1.0" });

        StateHasChanged();
    }

    private void GoToNextBatch()
    {
        if (!AllQuestionsInBatchAnswered) return;
        LoadNextBatch();
    }

    private async Task ResetProgress()
    {
        await CardStorage.ResetProgressAsync();
        allQuestions = await LoadQuestions();
        questionQueue = await LoadQuestionsQueue(allQuestions);
        LoadNextBatch();
        StateHasChanged();
    }

    private async Task SaveUserPreferencesAsync()
    {
        var preferences = new PddUserPreferences
            {
                HighlightTerms = highlightTerms,
                PrimaryLanguage = primaryLanguage
            };
        await PreferencesStorage.SavePreferencesAsync(preferences);
    }

    private void UpdateSecondaryLanguages()
    {
        // Get the two languages not selected as the primary language
        var secondaryLanguages = new[] { "en", "es", "ru" }
            .Where(lang => lang != primaryLanguage)
            .ToArray();
        
        secondaryLanguage1 = secondaryLanguages[0];
        secondaryLanguage2 = secondaryLanguages[1];
    }

    private async Task OnLanguageChanged((string Primary, string Secondary1, string Secondary2) languages)
    {
        primaryLanguage = languages.Primary;
        secondaryLanguage1 = languages.Secondary1;
        secondaryLanguage2 = languages.Secondary2;

        StateHasChanged();
        await SaveUserPreferencesAsync();
    }
}
