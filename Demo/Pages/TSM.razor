@page "/tsm"
@using Demo.Components
@using Demo.Demos.TSM
@using Demo.Services
@using GeneticAlgorithm.GeneralGenetic
@inject PageTitleService PageTitleService

<link rel="stylesheet" href="css/demos.css" />

<PageTitle>Travelling Salesman</PageTitle>

<div class="page-container">
    <div class="parameters-container">
        <div class="settings-container">
            <div class="setting-item">
                <label>Population:</label>
                <input type="number" @bind="PopulationSize" min="@PopulationSizeMin" max="@PopulationSizeMax" title="The number of individuals in the population."/>
            </div>

            <div class="setting-item">
                <label>Best:</label>
                <input type="number" @bind="BestChromosomes" min="@BestChromosomesMin" max="@BestChromosomesMax" title="The number of top-performing chromosomes to retain for the next generation."/>
            </div>

            <div class="setting-item">
                <label>Crossover:</label>
                <input type="number" @bind="CrossoverChromosomes" min="@CrossoverChromosomesMin" max="@CrossoverChromosomesMax" title="The number of chromosomes to be created through crossover operations."/>
            </div>

            <div class="setting-item">
                <label>Mutation:</label>
                <input type="number" @bind="MutationChromosomes" min="@MutationChromosomesMin" max="@MutationChromosomesMax" title="The number of chromosomes to be mutated in each generation."/>
            </div>

            <div class="setting-item">
                <label>Cities:</label>
                <input type="number" @bind="NumberOfCities" min="@NumberOfCitiesMin" max="@NumberOfCitiesMax" title="The number of cities in the traveling salesman problem."/>
            </div>

            @if (Genetic == null)
            {
                <div class="setting-item">
                    <button @onclick="InitializeGenetic">Run Algorithm</button>
                </div>
            }
            else
            {
                <div class="setting-item">
                    <label>Auto step:</label>
                    <input type="checkbox" id="isAuto" @bind="IsAuto" title="Automatically iterate through generations until the stopping condition is met."/>
                </div>
                <div class="setting-item">
                    <label>Iterations:</label>
                    <input type="number" @bind="MaxIterationsWithoutChange" min="@MaxIterationsWithoutChangeMin" max="@MaxIterationsWithoutChangeMax" title="The maximum number of iterations to run without any improvement in the best solution before stopping."/>
                </div>
                <div class="setting-item">
                    <button @onclick="IterationAsync">Make iteration</button>
                </div>
                <div class="setting-item">
                    <button @onclick="InitializeGenetic">Restart</button>
                </div>
            }
        </div>
    </div>
    <TspMapComponent ProblemData="TsmProblemData"
                     BestSolution="Genetic?.GetBestResult()"
                     Width="100%" Height="100%" class="map-component"/>
</div>

@code {
    protected override void OnInitialized()
    {
        base.OnInitialized();
        PageTitleService.SetTitle("Travelling Salesman");
    }

    private int PopulationSizeValue { get; set; } = 1000;
    private const int PopulationSizeMin = 10;
    private const int PopulationSizeMax = 10000;

    private int PopulationSize
    {
        get => PopulationSizeValue;
        set
        {
            if (value < PopulationSizeMin || value > PopulationSizeMax || value == PopulationSizeValue) return;
            PopulationSizeValue = value;
        }
    }

    private int BestChromosomesValue { get; set; } = 50;
    private const int BestChromosomesMin = 1;
    private const int BestChromosomesMax = 100;

    private int BestChromosomes
    {
        get => BestChromosomesValue;
        set
        {
            if (value < BestChromosomesMin || value > BestChromosomesMax || value == BestChromosomesValue) return;
            BestChromosomesValue = value;
        }
    }

    private int CrossoverChromosomesValue { get; set; } = 25;
    private const int CrossoverChromosomesMin = 1;
    private const int CrossoverChromosomesMax = 100;

    private int CrossoverChromosomes
    {
        get => CrossoverChromosomesValue;
        set
        {
            if (value < CrossoverChromosomesMin || value > CrossoverChromosomesMax || value == CrossoverChromosomesValue) return;
            CrossoverChromosomesValue = value;
        }
    }

    private int MutationChromosomesValue { get; set; } = 25;
    private const int MutationChromosomesMin = 1;
    private const int MutationChromosomesMax = 100;

    private int MutationChromosomes
    {
        get => MutationChromosomesValue;
        set
        {
            if (value < MutationChromosomesMin || value > MutationChromosomesMax || value == MutationChromosomesValue) return;
            MutationChromosomesValue = value;
        }
    }

    private int NumberOfCitiesValue { get; set; } = 10;
    private const int NumberOfCitiesMin = 1;
    private const int NumberOfCitiesMax = 100;

    private int NumberOfCities
    {
        get => NumberOfCitiesValue;
        set
        {
            if (value < NumberOfCitiesMin || value > NumberOfCitiesMax || value == NumberOfCitiesValue) return;
            NumberOfCitiesValue = value;
        }
    }

    private int MaxIterationsWithoutChangeValue { get; set; } = 10000;
    private const int MaxIterationsWithoutChangeMin = 0;
    private const int MaxIterationsWithoutChangeMax = 1000000;

    private int MaxIterationsWithoutChange
    {
        get => MaxIterationsWithoutChangeValue;
        set
        {
            if (value < MaxIterationsWithoutChangeMin || value > MaxIterationsWithoutChangeMax || value == MaxIterationsWithoutChangeValue) return;
            MaxIterationsWithoutChangeValue = value;
        }
    }

    private bool IsAuto { get; set; }
    public int Iteration { get; set; }
    private TsmProblemData? TsmProblemData { get; set; }
    private Genetic<TsmChromosome>? Genetic { get; set; }

    private void InitializeGenetic()
    {
        var geneticAlgorithmSettings = new GeneticAlgorithmSettings
        {
            Population = PopulationSize,
            BestChromosomes = BestChromosomes,
            CrossoverChromosomes = CrossoverChromosomes,
            MutationChromosomes = MutationChromosomes
        };

        var randomProvider = RandomProvider.Shared;
        var tsmProblemDataFactory = new TsmProblemDataFactory(randomProvider);
        TsmProblemData = tsmProblemDataFactory.Create(NumberOfCities, 200, 200);

        var mutator = new TsmChromosomeMutator(randomProvider);
        var crossoverer = new TsmChromosomeCrossoverer(randomProvider);
        var chromosomeFactory = new TsmChromosomeFactory(TsmProblemData.Cities.Length, randomProvider);
        var fitnessFunction = new TsmFitnessFunction(TsmProblemData);
        Genetic = new Genetic<TsmChromosome>(geneticAlgorithmSettings, mutator, crossoverer, chromosomeFactory, fitnessFunction);
        StateHasChanged();
    }

    private async Task IterationAsync()
    {
        Iteration = 0;
        do
        {
            Genetic?.NextIteration();
            Iteration++;
            StateHasChanged();
            await Task.Yield();
            await Task.Delay(1);
        } while (IsAuto && Iteration < MaxIterationsWithoutChangeValue);
    }

}

<style>
    :root {
        --gap-size: 5px;
        --height-size: 2em;
    }

    .page-container {
        display: flex;
        flex-direction: column;
        height: calc(100vh - 56px - var(--gap-size));
    }

    .parameters-container {
        margin-bottom: var(--gap-size);
    }

    .setting-item {
        display: flex;
        align-items: baseline;
        flex: 1 1 auto;
    }

        .setting-item label {
            margin-right: 5px;
            overflow: hidden;
            text-overflow: ellipsis;
            display: -webkit-box;
            -webkit-line-clamp: 2; /* Limit to 2 lines */
            -webkit-box-orient: vertical;
            white-space: normal;
        }

        .setting-item input[type="number"],
        .setting-item input[type="text"] {
            min-width: 5em;
            max-width: 8em;
            height: var(--height-size);
        }

        .setting-item button {
            height: var(--height-size);
            flex: 0 0 auto;
        }

    .map-component {
        flex-grow: 1;
        min-height: 100px;
    }

    canvas {
        border: 1px solid black;
    }

</style>