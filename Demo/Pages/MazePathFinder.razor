@page "/mazepathfinderdemo"

@using Demo.Components
@using Demo.Models
@using DimonSmart.MazeGenerator

@implements IWavePlotter

<link rel="stylesheet" href="css/demos.css" />
<PageTitle>Maze Generator Demo</PageTitle>

<h3>PathFinder</h3>

<section>
    <div style="margin-bottom: 20px;">
        <div class="settings-container">
            <label class="margin-right">
                Width:
                <input type="number" min="1" max="101" step="2" @bind="XSize" />
            </label>
            <label class="margin-right">
                Height:
                <input type="number" min="1" max="101" step="2" @bind="YSize" />
            </label>
        </div>
        <div class="settings-container">
            <label class="slider-label">
                Emptiness: <span class="value-display">@Emptiness%</span>
                <input type="range" min="0" max="100" @bind-value="Emptiness" @bind-value:event="oninput" />
            </label>
        </div>
        <div class="settings-container">
            <label>
                Wall Shortness: <span class="value-display">@StopWallProbability%</span>
                <input type="range" min="0" max="100" @bind-value="StopWallProbability" @bind-value:event="oninput" />
            </label>
        </div>
        <div class="settings-container">
            <button @onclick="FindPathAsync">Find path</button>
        </div>
    </div>

    @if (_maze != null)
    {
        <MazeDisplay Maze="_maze" OnMazeCellClick="HandleCellClick" />
    }

</section>

@code {
    private int _xSize = 31;
    private int XSize
    {
        get => _xSize;
        set
        {
            if (value % 2 == 0) return;
            if (_xSize != value)
            {
                _xSize = value;
                _ = GenerateMazeAsync();
            }
        }
    }

    private int _ySize = 21;
    private int YSize
    {
        get => _ySize;
        set
        {
            if (value % 2 == 0) return;
            if (_ySize != value)
            {
                _ySize = value;
                _ = GenerateMazeAsync();
            }
        }
    }

    private int _emptiness = 0;
    private int Emptiness
    {
        get => _emptiness;
        set
        {
            if (_emptiness != value)
            {
                _emptiness = value;
                _ = GenerateMazeAsync();
            }
        }
    }

    private double _stopWallProbability = 50.0;
    private double StopWallProbability
    {
        get => _stopWallProbability;
        set
        {
            if (_stopWallProbability != value)
            {
                _stopWallProbability = value;
                _ = GenerateMazeAsync();
            }
        }
    }

    private Maze? _maze;

    protected override async Task OnInitializedAsync()
    {
        await GenerateMazeAsync();
    }

    private bool _generationInProgress = false;

    private async Task GenerateMazeAsync()
    {
        if (_generationInProgress) return;
        _generationInProgress = true;
        _startPoint = null;
        _endPoint = null;
        ClearWave();
        CancelGeneration();
        var options = new DimonSmart.MazeGenerator.MazeBuildOptions(StopWallProbability / 100, Emptiness / 100.0);
        _maze = new Maze(XSize, YSize, () => new Demo.Models.MazeCellModel());
        var mazeBuilder = new MazeBuilder<MazeCell>(_maze, options);
        await mazeBuilder.BuildAsync(null, cancellationTokenSource.Token);
        StateHasChanged();
        _generationInProgress = false;
    }

    CancellationTokenSource cancellationTokenSource = new CancellationTokenSource();

    private void CancelGeneration()
    {
        cancellationTokenSource.Cancel();
        cancellationTokenSource = new CancellationTokenSource();
    }

    private (int X, int Y)? _startPoint;
    private (int X, int Y)? _endPoint;


    private void HandleCellClick((int X, int Y, string Button) cellClickInfo)
    {
        var (x, y, button) = cellClickInfo;
        if (!_startPoint.HasValue || (_startPoint.HasValue && _endPoint.HasValue))
        {
            SetStartPoint(x, y);
            if (_endPoint.HasValue)
            {
                var (oldX, oldY) = _endPoint.Value;
                (_maze?[oldX, oldY] as MazeCellModel)?.ClearSpecialMark();
                _endPoint = null;
                ClearWave();
            }
            StateHasChanged();
            return;
        }

        if (_startPoint.HasValue && !_endPoint.HasValue)
        {
            SetEndPoint(x, y);
            StateHasChanged();
            return;
        }
    }

    private void SetStartPoint(int x, int y)
    {
        if (_startPoint.HasValue)
        {
            var (oldX, oldY) = _startPoint.Value;
            (_maze?[oldX, oldY] as MazeCellModel)?.ClearSpecialMark();
        }
        _startPoint = (x, y);
        (_maze?[x, y] as MazeCellModel)?.SetStart();
    }

    private void SetEndPoint(int x, int y)
    {

        _endPoint = (x, y);
        (_maze?[x, y] as MazeCellModel)?.SetEnd();

    }

    private async Task FindPathAsync()
    {
        if (_maze == null) return;
        if (_startPoint == null || _endPoint == null) return;


        // var wavePlotter = new MazePlotter(this, TimeSpan.FromMicroseconds(25));
        var result =_maze.FindPath(_startPoint.Value.X, _startPoint.Value.Y, 
            (int x, int y) => x == _endPoint.Value.X && y == _endPoint.Value.Y
            , wave =>
        {
            wave.VisualizeWave(this);

            //    Task.Delay(500);

        });

        //if (result != null)
        //{
        //    result.VizualizePath(wavePlotter);
        //}
        StateHasChanged();
    }

    public void PlotWave(int x, int y, int waveNumber)
    {
        if (_maze == null) return;
        var cell = (MazeCellModel)_maze[x, y];
        cell.SetWaveNumber(waveNumber);
    }

    private void ClearWave()
    {
        if (_maze == null) return;
        for (int y = 0; y < _maze.Height; y++)
        {
            for (int x = 0; x < _maze.Width; x++)
            {
                ((MazeCellModel)_maze[x, y]).ResetWaveNumber();
            }
        }
    }
}
