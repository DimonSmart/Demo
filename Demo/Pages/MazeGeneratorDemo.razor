@page "/mazegeneratordemo"

@using Demo.Components
@using DimonSmart.MazeGenerator

@implements IMazePlotter

<link rel="stylesheet" href="css/demos.css" />
<PageTitle>Maze Generator Demo</PageTitle>

<h1>Maze Generator</h1>

<section>
    <div style="margin-bottom: 20px;">
        <div class="settings-container">
             <label class="margin-right">
                 Width:
                <input type="number" min="1" max="101" step="2" @bind="XSize" />
             </label>
             <label class="margin-right">
                 Height:
                <input type="number" min="1" max="101" step="2" @bind="YSize" />
             </label>
        </div>
        <div class="settings-container">
            <label class="slider-label">
                Emptiness: <span class="value-display">@Emptiness%</span>
                <input type="range" min="0" max="100" @bind-value="Emptiness" @bind-value:event="oninput" />
            </label>
        </div>

        <div class="settings-container">
            <label>
                Wall Shortness: <span class="value-display">@StopWallProbability%</span>
                <input type="range" min="0" max="100" @bind-value="StopWallProbability" @bind-value:event="oninput" />
            </label>
        </div>

        <div class="settings-container">
            <label>
                Slow Visualization
                <input type="checkbox" @bind="IsSlowVisualization" />
            </label>
        </div>
        
        <div class="settings-container">
            <button @onclick="GenerateMazeAsync">Generate Maze</button>
        </div>
    </div>

   
        @if (_maze != null)
        {
            <div style="display: grid; grid-template-columns: repeat(@XSize, 20px); gap: 1px;">
            @for (int y = 0; y < YSize; y++)
            {
                for (int x = 0; x < XSize; x++)
                {
                    <MazeCell X=x Y=y Cell=@_maze[x, y] />
                }
            }
            </div>
        }
       
</section>

@code {
    private int _xSize = 31;
    private int XSize
    {
        get => _xSize;
        set
        {
            if (value % 2 == 0) return;
            if (_xSize != value)
            {
                _xSize = value;
                if (!IsSlowVisualization) _ = GenerateMazeAsync();
            }
        }
    }

    private int _ySize = 21;
    private int YSize
    {
        get => _ySize;
        set
        {
            if (value % 2 == 0) return;
            if (_ySize != value)
            {
                _ySize = value;
                if (!IsSlowVisualization) _ = GenerateMazeAsync();
            }
        }
    }

    private int _emptiness = 0;
    private int Emptiness
    {
        get => _emptiness;
        set
        {
            if (_emptiness != value)
            {
                _emptiness = value;
                if (!IsSlowVisualization) _ = GenerateMazeAsync();
            }
        }
    }

    private double _stopWallProbability = 50.0;
    private double StopWallProbability
    {
        get => _stopWallProbability;
        set
        {
            if (_stopWallProbability != value)
            {
                _stopWallProbability = value;
                if (!IsSlowVisualization) _ = GenerateMazeAsync();
            }
        }
    }

    private bool _isSlowVisualization = false;
    private bool IsSlowVisualization
    {
        get => _isSlowVisualization;
        set
        {
            if (_isSlowVisualization != value)
            {
                _isSlowVisualization = value;
            }
        }
    }
    private Maze? _maze;

    protected override async Task OnInitializedAsync()
    {
        await GenerateMazeAsync();
    }

    CancellationTokenSource cancellationTokenSource = new CancellationTokenSource();

    private void CancelGeneration()
    {
        cancellationTokenSource.Cancel();
        cancellationTokenSource = new CancellationTokenSource();
    }

    private bool _generationInProgress = false;

    private async Task GenerateMazeAsync()
    {
        if (_generationInProgress) return;

        _generationInProgress = true;
        CancelGeneration();
        var options = new DimonSmart.MazeGenerator.MazeBuildOptions(StopWallProbability / 100, Emptiness / 100.0);
        _maze = new Maze(XSize, YSize, () => new Demo.Models.MazeCell());
        var mazeBuilder = new MazeBuilder<MazeCell>(_maze, options);
        await mazeBuilder.BuildAsync(this, cancellationTokenSource.Token);
        StateHasChanged();
        _generationInProgress = false;
    }

    // private async void FindPath()
    // {
    //     if (_maze == null) return;
    //     var wavePlotter = new MazePlotter(this, TimeSpan.FromMicroseconds(25));
    //     var result = await Task.Run(() => _maze.FindPath(1, 1, GetEndPointCriteria(XSize - 2, YSize - 2), wave =>
    //     {
    //         wave.VisualizeWave(wavePlotter);
    //         if (IsSlowVisualization)
    //         {
    //             Task.Delay(500);
    //         }
    //     }));
    // 
    //     if (result != null)
    //     {
    //         result.VizualizePath(wavePlotter);
    //     }
    //     StateHasChanged();
    // }

    private string GetCellColor(int x, int y) => _maze?.IsWall(x, y) ?? false ? "black" : "white";

    private static Func<int, int, bool> GetEndPointCriteria(int endX, int endY)
    {
        return (x, y) => x == endX && y == endY;
    }

    public async Task PlotPassageAsync(int x, int y)
    {
        StateHasChanged();
        await Task.Delay(500);
    }

    public async Task PlotWallAsync(int x, int y)
    {
        if (!IsSlowVisualization) return;
        StateHasChanged();
        var delay =TimeSpan.FromMilliseconds(100);
        await Task.Delay(delay);
    }
}
