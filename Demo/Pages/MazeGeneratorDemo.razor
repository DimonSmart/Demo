@page "/mazegeneratordemo"
@using Demo.Components
@using DimonSmart.MazeGenerator

<PageTitle>Maze Generator Demo</PageTitle>

<h1>Maze Generator Demo</h1>

<section>
    <div style="margin-bottom: 20px;">
        <label>
            X Size: @XSize
            <input type="number" min="1" @bind="XSize" />
        </label>
        <br />
        <label>
            Y Size: @YSize
            <input type="number" min="1" @bind="YSize" />
        </label>
        <br />
        <label>
            Emptyness: @Emptiness%
            <input type="range" min="0" max="100" @bind="Emptiness" />
        </label>
        <br />
        <label>
            Stop Wall Probability: @StopWallProbability%
            <input type="range" min="0" max="100" @bind="StopWallProbability" />
        </label>
        <br />
        <label>
            Slow Visualization
            <input type="checkbox" @bind="IsSlowVisualization" />
        </label>
        <br />
        <button @onclick="GenerateMazeAsync">Generate Maze</button>
        <button @onclick="FindPath">Find Path</button>
    </div>

   
        @if (_maze != null)
        {
            <div style="display: grid; grid-template-columns: repeat(@XSize, 20px); gap: 1px;">
            @for (int y = 0; y < YSize; y++)
            {
                for (int x = 0; x < XSize; x++)
                {
                    <MazeCell X=x Y=y Cell=@_maze[x, y] />
                }
            }
            </div>
        }
       
</section>

@code {
    private int _xSize = 31;
    private int XSize
    {
        get => _xSize;
        set
        {
            if (_xSize != value)
            {
                _xSize = value;
                if (!IsSlowVisualization) Task.Run(() => GenerateMazeAsync()).ConfigureAwait(false);
            }
        }
    }

    private int _ySize = 21;
    private int YSize
    {
        get => _ySize;
        set
        {
            if (_ySize != value)
            {
                _ySize = value;
                if (!IsSlowVisualization) Task.Run(() => GenerateMazeAsync()).ConfigureAwait(false);
            }
        }
    }

    private int _emptiness = 0;
    private int Emptiness
    {
        get => _emptiness;
        set
        {
            if (_emptiness != value)
            {
                _emptiness = value;
                if (!IsSlowVisualization) Task.Run(() => GenerateMazeAsync()).ConfigureAwait(false);
            }
        }
    }

    private double _stopWallProbability = 50.0;
    private double StopWallProbability
    {
        get => _stopWallProbability;
        set
        {
            if (_stopWallProbability != value)
            {
                _stopWallProbability = value;
                if (!IsSlowVisualization) Task.Run(() => GenerateMazeAsync()).ConfigureAwait(false);
            }
        }
    }

    private bool _isSlowVisualization = false;
    private bool IsSlowVisualization
    {
        get => _isSlowVisualization;
        set
        {
            if (_isSlowVisualization != value)
            {
                _isSlowVisualization = value;
            }
        }
    }
    private Maze? _maze;

    protected override void OnInitialized()
    {
       // GenerateMaze();
    }

    CancellationTokenSource cancellationTokenSource = new CancellationTokenSource();

    private void CancelGeneration()
    {
        cancellationTokenSource.Cancel();
        cancellationTokenSource = new CancellationTokenSource();
    }

    private async Task GenerateMazeAsync()
    {
        CancelGeneration();
        var options = new DimonSmart.MazeGenerator.MazeGenerateOptions(StopWallProbability / 100, Emptiness / 100.0);
        var delay = IsSlowVisualization ? TimeSpan.FromMilliseconds(100) : TimeSpan.Zero;
        var wavePlotter = new MazePlotter(this, delay);
        _maze = new Maze(XSize, YSize, () => new Demo.Models.MazeCell(), wavePlotter);
        await Task.Run(() =>
        {
            new MazeBuilder<MazeCell>(_maze, options).Build(cancellationTokenSource.Token);
        }, cancellationTokenSource.Token);
    }

    private async void FindPath()
    {
        if (_maze == null) return;
        var wavePlotter = new MazePlotter(this, TimeSpan.FromMicroseconds(25));
        var result = await Task.Run(() => _maze.FindPath(1, 1, GetEndPointCriteria(XSize - 2, YSize - 2), wave =>
        {
            wave.VisualizeWave(wavePlotter);
            if (IsSlowVisualization)
            {
                Task.Delay(500);
            }
        }));

        if (result != null)
        {
            result.VizualizePath(wavePlotter);
        }
        StateHasChanged();
    }

    private string GetCellColor(int x, int y) => _maze?.IsWall(x, y) ?? false ? "black" : "white";

    private static Func<int, int, bool> GetEndPointCriteria(int endX, int endY)
    {
        return (x, y) => x == endX && y == endY;
    }

    private class MazePlotter : IWavePlotter, IPathPlotter, IMazePlotter
    {
        private readonly MazeGeneratorDemo _page;
        private readonly TimeSpan _delay;
        private static readonly ConsoleColor[] colors = ((ConsoleColor[])Enum.GetValues(typeof(ConsoleColor))).Skip(1).ToArray();

        public MazePlotter(MazeGeneratorDemo page, TimeSpan delay)
        {
            _page = page;
            _delay = delay;
        }

        public void PlotWave(int x, int y, int waveNumber)
        {
            // _page.MazeVisualization[x, y] = true;
            _page.StateHasChanged();
        }

        public void PlotPath(int x, int y, int waveNumber)
        {
            // _page.MazeVisualization[x, y] = true;
            _page.StateHasChanged();
        }

        public async void PlotWall(int x, int y)
        {
            _page.StateHasChanged();
            await Task.Delay(_delay);
            // throw new NotImplementedException();
        }

        public void PlotPassage(int x, int y)
        {
            _page.StateHasChanged();
           // throw new NotImplementedException();
        }
    }
}
