@page "/mazegeneratordemo"

@using Demo.Components
@using Demo.Demos.MazePathFinder
@using Demo.Services
@using DimonSmart.MazeGenerator
@inject PageTitleService PageTitleService

@inherits MazeBaseComponent<MazeCellModel>

@implements IMazePlotter

<link rel="stylesheet" href="css/demos.css" />
<PageTitle>Maze Generator Demo</PageTitle>

<div class="page-container">
    <div style="margin-bottom: 20px;">
        <div class="settings-container">
            <label class="margin-right">
                Width:
                <input type="number" min="1" max="101" step="2" @bind="XSize" />
            </label>
            <label class="margin-right">
                Height:
                <input type="number" min="1" max="101" step="2" @bind="YSize" />
            </label>
        </div>
        <div class="settings-container">
            <label class="slider-label">
                Emptiness: <span class="value-display">@Emptiness%</span>
                <input type="range" min="0" max="100" @bind-value="Emptiness" @bind-value:event="oninput" />
            </label>
        </div>
        <div class="settings-container">
            <label>
                Wall Shortness: <span class="value-display">@WallShortness%</span>
                <input type="range" min="0" max="100" @bind-value="WallShortness" @bind-value:event="oninput" />
            </label>
        </div>
        <div class="settings-container">
            <label>
                Slow Visualization
                <input type="checkbox" @bind="IsSlowVisualization" />
            </label>
        </div>
        <div class="settings-container">
            <button @onclick="GenerateMazeAsync">Generate Maze</button>
        </div>
    </div>
    <div id="MazeContainerId" style="height:100%">
        @if (_maze != null)
        {
            <MazeDisplay TCell="MazeCellModel" Maze="_maze">
                <CellTemplate Context="cell">
                    <MazeCell X="@cell.X" Y="@cell.Y" Cell="@cell.Cell" />
                </CellTemplate>
            </MazeDisplay>
        }
    </div>
</div>
@code {
    private bool _generationInProgress = false;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        PageTitleService.SetTitle("Maze Generator");
    }

    protected override async Task GenerateMazeAsync()
    {
        if (_generationInProgress) return;
        _generationInProgress = true;
        CancelGeneration();
        var options = new MazeBuildOptions(WallShortness / 100, Emptiness / 100.0);
        _maze = new Maze<MazeCellModel>(XSize, YSize);
        var mazeBuilder = new MazeBuilder<MazeCellModel>(_maze, options);
        await mazeBuilder.BuildAsync(this, CancellationTokenSource.Token);
        StateHasChanged();
        _generationInProgress = false;
    }

    private string GetCellColor(int x, int y) => _maze?.IsWall(x, y) ?? false ? "black" : "white";

    private static Func<int, int, bool> GetEndPointCriteria(int endX, int endY)
    {
        return (x, y) => x == endX && y == endY;
    }

    public async Task PlotPassageAsync(int x, int y)
    {
        StateHasChanged();
        await Task.Delay(50);
    }

    public async Task PlotWallAsync(int x, int y)
    {
        if (!IsSlowVisualization) return;
        StateHasChanged();
        var delay = TimeSpan.FromMilliseconds(50);
        await Task.Delay(delay);
    }
}
