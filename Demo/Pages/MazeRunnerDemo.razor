@page "/mazerunnerdemo"

@using Demo.Components
@using Demo.Demos.Common
@using Demo.Demos.MazeRunner
@using Demo.Services
@using DimonSmart.MazeGenerator
@using Microsoft.SemanticKernel
@using Microsoft.SemanticKernel.Services
@using Microsoft.SemanticKernel.ChatCompletion
@using Microsoft.SemanticKernel.Agents
@using Microsoft.Extensions.DependencyInjection
@inject PageTitleService PageTitleService
@inject LogStore LogStore
@inject IOllamaModelService OllamaModelService
@inject UserPreferencesStorageService<MazeRunnerUserPreferences> UserPreferencesStorageService

@implements IMazePlotter

<!--
  Maze Runner Demo
  A simple page that generates a maze and controls a robot via joystick or chat commands.
-->

<link rel="stylesheet" href="css/demos.css" />
<PageTitle>Maze Generator Demo</PageTitle>

    <div class="page-container maze-runner-container" style="display: flex;">
    <!-- Left container: Maze, Joystick, Settings and Chat -->
    <section style="flex: 1; overflow-y: auto; padding: 20px;">
        <div style="text-align: center; border: 1px solid #ccc; padding: 10px;">
            <div>
                <label for="connectionType">Connection Type:</label>
                <select id="connectionType" @onchange="OnConnectionTypeChanged" value="@_connectionType">
                    <option value="ollama">Ollama</option>
                    <option value="openai">OpenAI</option>
                </select>
            </div>

            @if (_connectionType == "ollama")
            {
                @if (AvailableModels != null && AvailableModels.Count > 0)
                {
                    <div style="margin-top:10px;">
                        <label for="modelSelect">Select Ollama Model:</label>
                        <select id="modelSelect" @onchange="OnModelChanged" value="@SelectedModelId">
                            @foreach (var model in AvailableModels)
                            {
                                <option value="@model.ModelId">
                                    @model.ModelId (@model.ParameterCount, @((model.Size / 1024.0 / 1024.0).ToString("F2")) MB)
                                </option>
                            }
                        </select>
                    </div>
                }
                else
                {
                    <div style="margin-top:10px;">
                        <h4>Installing and Configuring ollama</h4>
                        <p>No models were found. To get started with ollama, please follow these steps:</p>
                        <ol style="text-align: left; display: inline-block;">
                            <li>
                                Download and install ollama from the official website:
                                <a href="https://ollama.com" target="_blank">https://ollama.com</a>.
                            </li>
                            <li>
                                Run ollama and download the required models (for example, using the command
                                <code>ollama pull &lt;model-id&gt;</code>).
                            </li>
                            <li>Restart the application to apply the changes.</li>
                        </ol>
                    </div>
                }
            }
            else if (_connectionType == "openai")
            {
                <div style="margin-top: 10px;">
                    <label for="openaiKey">OpenAI API Key (will be masked):</label>
                    <input id="openaiKey"
                           type="password"
                           @bind="_openAIApiKey"
                           @bind:event="oninput"
                           @onblur="SaveSettings"
                           placeholder="Enter OpenAI API key" />
                </div>
                <div style="margin-top: 10px;">
                    <label for="openaiModel">OpenAI Model (e.g., gpt-3.5-turbo):</label>
                    <input id="openaiModel"
                           type="text"
                           @bind="_openAIModel"
                           @bind:event="oninput"
                           @onblur="SaveSettings"
                           placeholder="Enter OpenAI Model" />
                </div>
            }
        </div>

        @if (_maze != null)
        {
            <div style="margin-top: 20px; display: flex; flex-wrap: wrap; gap: 20px; justify-content: center; align-items: flex-start;">
                <!-- Maze display container -->
                <div style="flex: 1 1 300px;">
                    <div style="display: flex; justify-content: center;">
                        <CascadingValue Value="_maze.Robot">
                            <MazeDisplay TCell="MazeRunnerCellModel" Maze="_maze">
                                <CellTemplate Context="cell">
                                    <MazeRunnerCell X="@cell.X" Y="@cell.Y" Cell="@cell.Cell" />
                                </CellTemplate>
                            </MazeDisplay>
                        </CascadingValue>
                    </div>
                </div>

                <!-- Joystick control container -->
                <div style="flex: 0 0 auto;">
                    <Joystick Width="150px" Height="150px"
                              OnUpClicked="OnUpClicked"
                              OnDownClicked="OnDownClicked"
                              OnLeftClicked="OnLeftClicked"
                              OnRightClicked="OnRightClicked" />
                </div>
            </div>

            <!-- Chat block -->
            <div style="margin-top: 20px; text-align: center; border: 1px solid #ccc; padding: 10px;">
                <input type="text" @bind="UserCommand" placeholder="Enter command (e.g., 'move right')" style="width:300px;" />
                <button @onclick="ProcessUserCommand" disabled="@IsProcessingCommand">Send Command</button>
                @if (IsProcessingCommand)
                {
                    <Spinner />
                }
                <div style="margin-top:10px;">
                    <strong>Assistant's response:</strong> @ResponseMessage
                </div>
            </div>
        }
    </section>

    <!-- Right container: Log view (full height) -->
    <section style="min-width: 200px; width: 33%; border-left: 1px solid #ccc; height: 100%; overflow-y: auto;">
        <LogView LogMessages="@LogStore.Messages" />
    </section>
</div>

@code {
    protected int XSize = 9;
    protected int YSize = 9;
    protected MazeRunnerMaze? _maze;

    private bool IsProcessingCommand = false;
    private string UserCommand { get; set; } = "";
    private string ResponseMessage { get; set; } = "";

    // The available LLM models found by the IOllamaModelService
    private IReadOnlyList<OllamaModelInfo> AvailableModels { get; set; } = new List<OllamaModelInfo>();
    private string SelectedModelId { get; set; } = "";

    private string _connectionType = "ollama"; // default to ollama
    private string _openAIApiKey = "";
    private string _openAIModel = "gpt-4.0-mini";

    protected override async Task OnInitializedAsync()
    {
        PageTitleService.SetTitle("Maze runner");
        GenerateMaze();

        // Load all available models from the service
        AvailableModels = await OllamaModelService.GetLoadedModelsAsync();

        // Load user preferences (which includes the selected model, if any)
        var preferences = await UserPreferencesStorageService.LoadPreferencesAsync();
        if (preferences != null)
        {
            if (!string.IsNullOrEmpty(preferences.SelectedModelId))
                SelectedModelId = preferences.SelectedModelId;
            if (!string.IsNullOrEmpty(preferences.ConnectionType))
                _connectionType = preferences.ConnectionType;
            if (!string.IsNullOrEmpty(preferences.OpenAIApiKey))
                _openAIApiKey = preferences.OpenAIApiKey;
            if (!string.IsNullOrEmpty(preferences.OpenAIModel))
                _openAIModel = preferences.OpenAIModel;
        }

        if (preferences == null && AvailableModels.Count > 0)
            SelectedModelId = AvailableModels[0].ModelId;

        StateHasChanged();
    }

    // Generates the initial maze
    protected void GenerateMaze()
    {
        _maze = new MazeRunnerMaze(XSize, YSize);
        var mazeBuilder = new MazeBuilder<MazeRunnerCellModel>(_maze);
        mazeBuilder.Build(this, CancellationToken.None);
    }

    // Example method to convert the current maze state into a string (text/ASCII).
    private string GetMazeStateString()
    {
        if (_maze == null) return "No maze found.";
        return $"Maze size: {XSize}x{YSize}. Robot at: {_maze.Robot.X}, {_maze.Robot.Y}";
    }

    async Task IMazePlotter.PlotWallAsync(int x, int y)
    {
        StateHasChanged();
        await Task.Delay(50);
    }

    #region Joystick event handlers
    private void OnUpClicked()
    {
        var result = _maze?.Robot.MoveUp();
        LogStore.Messages.Add(new LogStore.LogMessage($"Manual move up: {result}", LogStore.LogType.RobotMovements));
        StateHasChanged();
    }

    private void OnDownClicked()
    {
        var result = _maze?.Robot.MoveDown();
        LogStore.Messages.Add(new LogStore.LogMessage($"Manual move down: {result}", LogStore.LogType.RobotMovements));
        StateHasChanged();
    }

    private void OnLeftClicked()
    {
        var result = _maze?.Robot.MoveLeft();
        LogStore.Messages.Add(new LogStore.LogMessage($"Manual move left: {result}", LogStore.LogType.RobotMovements));
        StateHasChanged();
    }

    private void OnRightClicked()
    {
        var result = _maze?.Robot.MoveRight();
        LogStore.Messages.Add(new LogStore.LogMessage($"Manual move right: {result}", LogStore.LogType.RobotMovements));
        StateHasChanged();
    }
    #endregion

    // Called when the user enters a command and clicks "Send Command"
    private async Task ProcessUserCommand()
    {
        if (IsProcessingCommand) return;

        IsProcessingCommand = true;
        StateHasChanged();

        try
        {
            var kernel = GetKernel();
            var response = await ExecuteChatCompletion(kernel);
            ResponseMessage = response;
            LogStore.Messages.Add(new LogStore.LogMessage($"Semantic: {ResponseMessage}", LogStore.LogType.SemanticKernel));
        }
        catch (Exception ex)
        {
            HandleError("An error occurred", ex);
        }
        finally
        {
            IsProcessingCommand = false;
            StateHasChanged();
        }
    }

    private Kernel GetKernel()
    {
        if (_maze == null)
            throw new InvalidOperationException("Maze is not initialized");

        var kernelBuildParameters = new KernelBuildParameters(_maze, _connectionType, SelectedModelId, _openAIModel, IncludePlugins: true, _openAIApiKey, LogStore);
        return KernelFactory.BuildKernel(kernelBuildParameters);
    }

    private async Task<string> ExecuteChatCompletion(Kernel kernel)
    {
        var systemPrompt = BuildSystemPrompt();
        
        // Настройка выполнения промпта с автоматическим вызовом функций
        var executionSettings = new PromptExecutionSettings 
        { 
            FunctionChoiceBehavior = FunctionChoiceBehavior.Auto() 
        };
        
        // ⭐ НАСТОЯЩИЙ РЕЖИМ АГЕНТА - ChatCompletionAgent ⭐
        // Это и есть правильный "режим агента" как в примере OllamaChat
        var agent = new ChatCompletionAgent
        {
            Kernel = kernel,
            Name = "MazeRunnerAgent",
            Instructions = systemPrompt,
            Description = "AI Assistant that controls a robot in a maze",
            Arguments = new KernelArguments(executionSettings)
        };

        // Создаем список сообщений
        var messages = new List<ChatMessageContent>
        {
            new(AuthorRole.User, UserCommand)
        };
        
        // Получаем ответ от агента
        var responses = agent.InvokeAsync(messages);
        await foreach (var responseItem in responses)
        {
            // Получаем ChatMessageContent из AgentResponseItem
            if (responseItem.Message != null && !string.IsNullOrEmpty(responseItem.Message.Content))
            {
                return responseItem.Message.Content;
            }
        }

        return "No response from agent";
    }

    private string BuildSystemPrompt()
    {
        var initialPrompt = @"You are a helpful assistant that can control a robot in a maze. 

You have access to the following functions to control the robot:
- MoveUp: Move the robot up one cell
- MoveDown: Move the robot down one cell  
- MoveLeft: Move the robot left one cell
- MoveRight: Move the robot right one cell
- LookAround: Get a visual representation of the complete maze state

The maze uses the following symbols:
- R = Robot position
- # = Wall (impassable)
- A = Apple
- P = Pear  
- _ = Empty space

The entire maze is visible from the start. When the user asks you to control the robot, use the available functions to move the robot and look around the maze as needed. You can see the complete maze layout at any time using LookAround.

Coordinates are zero-based with (0,0) at the top-left corner. X increases going right, Y increases going down.";
        
        return initialPrompt;
    }

    private void HandleError(string userMessage, Exception ex)
    {
        ResponseMessage = userMessage;
        LogStore.Messages.Add(new LogStore.LogMessage($"Error: {ex.Message}", LogStore.LogType.SemanticKernel));
        if (ex.InnerException != null)
        {
            LogStore.Messages.Add(new LogStore.LogMessage($"Inner exception: {ex.InnerException.Message}", LogStore.LogType.SemanticKernel));
        }
    }

    private async Task OnModelChanged(ChangeEventArgs e)
    {
        SelectedModelId = e.Value?.ToString() ?? "";
        await SaveSettings();
        LogStore.Messages.Add(new LogStore.LogMessage($"Selected Ollama model changed: {SelectedModelId}", LogStore.LogType.UserInput));
        StateHasChanged();
    }

    private async Task OnConnectionTypeChanged(ChangeEventArgs e)
    {
        _connectionType = e.Value?.ToString() ?? "ollama";
        await SaveSettings();
        LogStore.Messages.Add(new LogStore.LogMessage($"Connection type changed: {_connectionType}", LogStore.LogType.UserInput));
        StateHasChanged();
    }

    private async Task SaveSettings()
    {
        var preferences = new MazeRunnerUserPreferences
            {
                SelectedModelId = SelectedModelId,
                ConnectionType = _connectionType,
                OpenAIApiKey = _openAIApiKey,
                OpenAIModel = _openAIModel
            };
        await UserPreferencesStorageService.SavePreferencesAsync(preferences);
    }
}
