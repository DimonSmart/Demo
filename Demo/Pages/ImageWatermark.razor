@page "/ImageWaterMark"
@using Demo.Components
@using Microsoft.AspNetCore.Components.Forms
@using SkiaSharp
@using SkiaSharp.Views.Blazor
<link rel="stylesheet" href="css/demos.css" />

<PageTitle>Image Watermark</PageTitle>

<div class="watermark-dashboard-container">
    <div class="watermark-dashboard-item watermark-dashboard-droparea">
        <div class="dropzone @_dropClass rounded">
            <InputFile id="fileInput" multiple="false" accept="image/*" title=""
            OnChange="HandleFileSelected"
            @ondragenter="HandleDragEnter"
            @ondragleave="HandleDragLeave" />
            Drop an image here or click to upload.
        </div>

        <!-- Image Preview -->
        @if (_imageDataUrl != null)
        {
            <div class="image-preview">
                <img src="@_imageDataUrl" alt="Image preview" />
                <p>Image Size: @(_waterMarkedImageBytes?.Length / 1024) KB</p>
            </div>

        }
        else
        {
            <p class="info-text">
                The uploaded image is stored only on your computer and is not uploaded anywhere else.
            </p>
        }
    </div>
    <div class="watermark-dashboard-item watermark-dashboard-textarea">
        <div class="settings-container">
            <label for="rotationId" class="margin-right">Rotate image:</label>
            <RotationControl Id="rotationId" Rotation="@_imageRotation" RotationChanged="OnRotationChanged" />
        </div>
        <div class="settings-container">
            <label for="watermarkText" class="margin-right">Watermark Text:</label>
            <textarea @bind="_watermarkText" style="width: 100%" id="watermarkText" rows="2" cols="25"></textarea>
        </div>

        <div class="settings-container">
            <label for="watermarkTextColorPicker" class="margin-right">Color:</label>
            <ColorPicker Id="watermarkTextColorPicker" @bind-SelectedColor="_watermarkTextColorPicker" AllowedColors="new SKColor[] { SKColors.Red, SKColors.Green, SKColors.Blue, SKColors.White, SKColors.Black }" />
        </div>

        <div class="settings-container">
            <label for="watermarkOpacity" class="margin-right">Opacity (%):</label>
            <input type="number" @bind="_watermarkOpacity" id="watermarkOpacity" min="1" max="100" style="width: 6em;" />
        </div>
        <div class="settings-container">
            <label for="watermarkAngle" class="margin-right">Angle (°):</label>
            <input type="number" @bind="_watermarkAngle" id="watermarkAngle" min="0" max="360" style="width: 6em;" />
        </div>
        <div class="settings-container">
            <label for="watermarkDensity" class="margin-right">Density:</label>
            <input type="number" @bind="_watermarkDensity" id="watermarkDensity" min="1" max="100" style="width: 6em;" />
        </div>
        <div class="settings-container">
            <label for="resizeOptions" class="margin-right">Resize Options:</label>
            <select @bind="_selectedResizeOption" class="spaced-element" id="resizeOptions">
                @foreach (var option in Enum.GetValues<ResizeOption>())
                {
                    <option value="@option">@option.ToString().TrimStart('_')</option>
                }
            </select>
        </div>
        <button class="btn" @onclick="ApplyWatermark">Apply</button>
        @if (_imageDataUrl != null)
        {
            <a href="@_imageDataUrl" download="doc.png" class="btn">Download</a>
        }


    </div>
</div>

@code {
    private string? _imageDataUrl;
    private string _dropClass = "";
    private byte[]? _initialImageBytes;
    private byte[]? _rotatedImageBytes;
    private byte[]? _waterMarkedImageBytes;
    private string _watermarkText = "Confidential: For [Service Name] Use Only";
    private int _watermarkOpacity = 25;
    private double _watermarkAngle = 30;
    private int _watermarkDensity = 2;
    private ResizeOption _selectedResizeOption = ResizeOption.Original;
    private int _imageRotation = 0;

    private SKColor _watermarkTextColorPicker = SKColors.Red;

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024);
        using var ms = new MemoryStream();
        await stream.CopyToAsync(ms);
        _initialImageBytes = ms.ToArray();
        _rotatedImageBytes = _initialImageBytes;
        _waterMarkedImageBytes = _initialImageBytes;
        UpdateImagePreview();
    }

    private void UpdateImagePreview()
    {
        if (_waterMarkedImageBytes != null)
        {
            _imageDataUrl = $"data:image/png;base64,{Convert.ToBase64String(_waterMarkedImageBytes)}";
        }
    }

    private void OnRotationChanged(int newRotation)
    {
        _imageRotation = newRotation;
        _rotatedImageBytes = RotateImage();
        _waterMarkedImageBytes = _rotatedImageBytes;
        UpdateImagePreview();
    }

    private byte[]? RotateImage()
    {
        if (_initialImageBytes == null) return null;

        using var inputStream = new MemoryStream(_initialImageBytes);
        using var originalBitmap = SKBitmap.Decode(inputStream);

        SKBitmap rotatedBitmap;
        int rotationDegrees = _imageRotation % 360;

        if (rotationDegrees == 0)
        {
            rotatedBitmap = originalBitmap.Copy();
        }
        else
        {
            bool is90or270 = rotationDegrees == 90 || rotationDegrees == 270;
            rotatedBitmap = new SKBitmap(
                is90or270 ? originalBitmap.Height : originalBitmap.Width,
                is90or270 ? originalBitmap.Width : originalBitmap.Height
            );

            using var canvas = new SKCanvas(rotatedBitmap);
            canvas.Clear(SKColors.Transparent);

            // Set up transformations for the given rotation
            canvas.Translate(rotatedBitmap.Width / 2, rotatedBitmap.Height / 2);
            canvas.RotateDegrees(rotationDegrees);
            canvas.Translate(-originalBitmap.Width / 2, -originalBitmap.Height / 2);
            canvas.DrawBitmap(originalBitmap, 0, 0);
        }

        using var image = SKImage.FromBitmap(rotatedBitmap);
        using var data = image.Encode(SKEncodedImageFormat.Png, 100);
        return data.ToArray();
    }


    private void HandleDragEnter()
    {
        _dropClass = "dropzone-drag";
    }

    private void HandleDragLeave()
    {
        _dropClass = "";
    }

    private void ApplyWatermark()
    {
        if (_rotatedImageBytes == null) return;

        using var inputStream = new MemoryStream(_rotatedImageBytes);
        using var originalBitmap = SKBitmap.Decode(inputStream);
        var (width, height) = GetResizedDimensions(originalBitmap.Width, originalBitmap.Height);

        using var surface = SKSurface.Create(new SKImageInfo(width, height));
        var canvas = surface.Canvas;

        canvas.DrawBitmap(originalBitmap, new SKRect(0, 0, width, height));

        var textSize = CalculateFontSize(_watermarkText, width);
        using var typeface = SKTypeface.Default;
        using var font = new SKFont(typeface, textSize)
            {
                Edging = SKFontEdging.Antialias
            };

        using var paint = new SKPaint
            {
                Color = _watermarkTextColorPicker.WithAlpha((byte)(_watermarkOpacity * 255 / 100)),
                IsAntialias = true,
            };

        canvas.Save();
        canvas.RotateDegrees((float)_watermarkAngle);

        var maxSide = Math.Max(width, height);
        for (float y = -maxSide; y < maxSide * 2; y += (textSize * _watermarkDensity))
        {
            canvas.DrawText(_watermarkText, new SKPoint(0, y), font, paint);
        }

        canvas.Restore();

        using var image = surface.Snapshot();
        using var data = image.Encode(SKEncodedImageFormat.Png, 100);
        _waterMarkedImageBytes = data.ToArray();
        UpdateImagePreview();
    }

    float CalculateFontSize(string text, float imageWidth, float initialFontSize = 16)
    {
        using var typeface = SKTypeface.FromFamilyName("Arial");
        using var font = new SKFont(typeface, initialFontSize);

        var textWidth = font.MeasureText(text);
        var scaleFactor = imageWidth / textWidth;
        var adjustedFontSize = initialFontSize * scaleFactor;

        return adjustedFontSize;
    }

    private (int width, int height) GetResizedDimensions(int originalWidth, int originalHeight)
    {
        if (_selectedResizeOption == ResizeOption.Original)
        {
            return (originalWidth, originalHeight);
        }

        var dimensions = _selectedResizeOption.ToString().TrimStart('_').Split('x');
        var targetWidth = int.Parse(dimensions[0]);
        var targetHeight = int.Parse(dimensions[1]);

        var aspectRatio = (float)originalWidth / originalHeight;
        if (targetWidth / (float)targetHeight > aspectRatio)
        {
            targetWidth = (int)(targetHeight * aspectRatio);
        }
        else
        {
            targetHeight = (int)(targetWidth / aspectRatio);
        }

        return (targetWidth, targetHeight);
    }

    private enum ResizeOption
    {
        Original,
        _1920x1080,
        _1366x768,
        _1280x720,
        _1024x768,
        _800x600
    }
}

<style>
    .watermark-dashboard-container {
        display: flex;
        flex-direction: row;
        flex-wrap: nowrap;
        justify-content: space-between;
        gap: var(--gap-size);
    }

    .watermark-dashboard-item {
        display: flex;
        flex-direction: column;
        overflow: hidden;
        box-sizing: border-box;
        flex: 1;
        margin: 1em;
    }

    .watermark-dashboard-droparea {
        min-width: 150px;
        max-width: 50%;
    }

    .watermark-dashboard-textarea {
        min-width: 150px;
        max-width: 50%;
    }

    .dropzone {
        border: 3px dashed steelblue;
        margin-bottom: 5px;
        padding: 1rem;
        display: flex;
        align-items: center;
        justify-content: center;
        box-shadow: inset 0 0 8px rgba(0,0,0,0.2);
        color: black;
        font-size: 1.0rem;
        cursor: pointer;
        position: relative;
    }

        .dropzone:hover {
            background-color: #f3f3f3;
            color: #333;
        }

        .dropzone input[type=file] {
            position: absolute;
            width: 100%;
            height: 100%;
            opacity: 0;
            cursor: pointer;
        }

    .dropzone-drag {
        background-color: palegreen;
    }

    .info-text {
        margin-top: 5px;
        font-style: italic;
        color: grey;
        font-size: 1.0rem;
    }

    .image-preview {
        margin-top: 10px;
        text-align: center;
    }

        .image-preview img {
            max-width: 100%;
            height: auto;
            border: 2px solid #ccc;
            border-radius: 5px;
            box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.25);
        }

    .btn {
        display: inline-block;
        margin: 1em;
        width: fit-content;
      
        color: white;
        background-color: #007bff;
        border: none;
        border-radius: 5px;
        text-align: center;
        text-decoration: none;
        cursor: pointer;
    }

        .btn:hover {
            background-color: #0056b3;
        }
</style>
