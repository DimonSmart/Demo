@using System.Reflection
@using Microsoft.AspNetCore.Components.WebAssembly.Services
@inject LazyAssemblyLoader AssemblyLoader

<Router AppAssembly="@typeof(App).Assembly"
        AdditionalAssemblies="@_additionalAssemblies"
        OnNavigateAsync="HandleNavigationAsync">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
        <FocusOnNavigate RouteData="@routeData" Selector="h1" />
    </Found>
    <NotFound>
        <PageTitle>Not found</PageTitle>
        <LayoutView Layout="@typeof(MainLayout)">
            <p role="alert">Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>

@code {
    private readonly List<Assembly> _additionalAssemblies = new();
    private bool _markdownModuleLoaded;
    private bool _pdfCropperModuleLoaded;
    private bool _hashXModuleLoaded;
    private bool _travellingSalesmanModuleLoaded;
    private bool _blackjackModuleLoaded;

    private async Task HandleNavigationAsync(NavigationContext args)
    {
        var path = args.Path ?? string.Empty;

        if (!_markdownModuleLoaded && path.StartsWith("markdown-to-word", StringComparison.OrdinalIgnoreCase))
        {
            await LoadModuleAsync("MarkdownToWordDemo.dll");
            _markdownModuleLoaded = true;
        }

        if (!_pdfCropperModuleLoaded && path.StartsWith("pdf-cropper", StringComparison.OrdinalIgnoreCase))
        {
            await LoadModuleAsync("PdfCropperDemo.dll");
            _pdfCropperModuleLoaded = true;
        }

        if (!_hashXModuleLoaded && path.StartsWith("hashxdemo", StringComparison.OrdinalIgnoreCase))
        {
            await LoadModuleAsync("HashXDemoModule.dll");
            _hashXModuleLoaded = true;
        }

        if (!_travellingSalesmanModuleLoaded && path.StartsWith("tsm", StringComparison.OrdinalIgnoreCase))
        {
            await LoadModuleAsync("TravellingSalesmanDemoModule.dll");
            _travellingSalesmanModuleLoaded = true;
        }

        if (!_blackjackModuleLoaded && path.StartsWith("bjgame", StringComparison.OrdinalIgnoreCase))
        {
            await LoadModuleAsync("BlackjackDemoModule.dll");
            _blackjackModuleLoaded = true;
        }
    }

    private async Task LoadModuleAsync(string assemblyName)
    {
        var assemblies = await AssemblyLoader.LoadAssembliesAsync(new[] { assemblyName });
        _additionalAssemblies.AddRange(assemblies);
        StateHasChanged();
    }
}
