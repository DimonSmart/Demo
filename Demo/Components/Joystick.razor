<div class="joystick" style="width:@Width; height:@Height; display: inline-block;">
    <div style="width: 100%; height: 100%; display: grid; grid-template-columns: 1fr 1fr 1fr; grid-template-rows: 1fr 1fr 1fr; gap: 5px;">
        <!-- Top row: empty, up, empty -->
        <div></div>
        <button style="grid-column: 2; width: 100%; height: 100%;" @onclick="HandleUpClicked">↑</button>
        <div></div>

        <!-- Middle row: left, empty, right -->
        <button style="grid-row: 2; grid-column: 1; width: 100%; height: 100%;" @onclick="HandleLeftClicked">←</button>
        <div></div>
        <button style="grid-row: 2; grid-column: 3; width: 100%; height: 100%;" @onclick="HandleRightClicked">→</button>

        <!-- Bottom row: empty, down, empty -->
        <div></div>
        <button style="grid-column: 2; width: 100%; height: 100%;" @onclick="HandleDownClicked">↓</button>
        <div></div>
    </div>
</div>

@code {
    [Parameter] public string Width { get; set; } = "100%";
    [Parameter] public string Height { get; set; } = "100%";

    [Parameter] public EventCallback OnUpClicked { get; set; }
    [Parameter] public EventCallback OnDownClicked { get; set; }
    [Parameter] public EventCallback OnLeftClicked { get; set; }
    [Parameter] public EventCallback OnRightClicked { get; set; }

    private async Task HandleUpClicked()
    {
        if (OnUpClicked.HasDelegate)
            await OnUpClicked.InvokeAsync();
    }

    private async Task HandleDownClicked()
    {
        if (OnDownClicked.HasDelegate)
            await OnDownClicked.InvokeAsync();
    }

    private async Task HandleLeftClicked()
    {
        if (OnLeftClicked.HasDelegate)
            await OnLeftClicked.InvokeAsync();
    }

    private async Task HandleRightClicked()
    {
        if (OnRightClicked.HasDelegate)
            await OnRightClicked.InvokeAsync();
    }
}
