@page "/tsp-map"
@using Demo.Demos.TSM
@using Demo.Demos.TSM.GeneralGenetic
@using Demo.Services
@using Excubo.Blazor.Canvas
@using Excubo.Blazor.Canvas.Contexts

<div id="@CanvasId" class="@Class" style="width:@Width; height:@Height">
    @if (_canvasWidth != 0 && _canvasHeight != 0)
    {
        <Canvas @ref="_canvasReference" width="@_canvasWidth" height="@_canvasHeight">abc</Canvas>
    }
</div>

@code {
    [Parameter] public string? Width { get; set; }
    [Parameter] public string? Height { get; set; }
    [Parameter] public TsmProblemData? ProblemData { get; set; }
    [Parameter] public ChromosomeWithScore<TsmChromosome>? BestSolution { get; set; }
    [Parameter] public string? Class { get; set; }

    [Inject] protected BrowserService BrowserService { get; set; } = null!;
    private const string CanvasId = "tsm_canvas";
    private Canvas? _canvasReference;
    private int _canvasWidth;
    private int _canvasHeight;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var size = await BrowserService.GetElementSizeByIdAsync(CanvasId);
            _canvasWidth = size.Width;
            _canvasHeight = size.Height;
            StateHasChanged();
        }

        if (_canvasReference != null && ProblemData != null && BestSolution != null)
        {
            var context = await _canvasReference.GetContext2DAsync();
            await context.ClearRectAsync(0, 0, _canvasWidth, _canvasHeight);

            await DrawCitiesAsync(context, ProblemData.Cities);
            var path = BestSolution.Chromosome.Cities;

            await DrawPath(context, path);

            await DrawStartSign(context, ProblemData.Cities[path[0]]);
            await DrawFinishSign(context, ProblemData.Cities[path[^1]]);
        }
    }

    private async Task DrawPath(Context2D context, IReadOnlyList<int> path)
    {
        await context.StrokeStyleAsync("blue");
        await context.LineWidthAsync(2);

        await context.BeginPathAsync();
        for (var i = 0; i < path.Count - 1; i++)
        {
            var fromCity = ProblemData!.Cities[path[i]];
            var toCity = ProblemData.Cities[path[i + 1]];

            var (scaledFromX, scaledFromY) = ScaleCoordinates(fromCity.X, fromCity.Y);
            var (scaledToX, scaledToY) = ScaleCoordinates(toCity.X, toCity.Y);

            await context.MoveToAsync(scaledFromX, scaledFromY);
            await context.LineToAsync(scaledToX, scaledToY);
        }

        await context.StrokeAsync();
    }

    private async Task DrawCitiesAsync(Context2D context, IEnumerable<City> cities)
    {
        await context.FillStyleAsync("black");
        foreach (var city in cities)
        {
            var (scaledX, scaledY) = ScaleCoordinates(city.X, city.Y);
            await context.BeginPathAsync();
            await context.ArcAsync(scaledX, scaledY, 5, 0, 2 * Math.PI);
            await context.FillAsync(FillRule.NonZero);
        }
    }

    private async Task DrawStartSign(Context2D context, City startCity)
    {
        var (scaledX, scaledY) = ScaleCoordinates(startCity.X, startCity.Y);

        await context.FillStyleAsync("red");
        await context.FontAsync("16px Arial");
        await context.FillTextAsync("🚩", scaledX - 4, scaledY - 10);
    }

    private async Task DrawFinishSign(Context2D context, City finishCity)
    {
        var (scaledX, scaledY) = ScaleCoordinates(finishCity.X, finishCity.Y);

        await context.FillStyleAsync("black");
        await context.FontAsync("16px Arial");
        await context.FillTextAsync("🏁", scaledX - 4, scaledY - 10);
    }

    private (double X, double Y) ScaleCoordinates(double x, double y)
    {
        var scaleX = (double)_canvasWidth / ProblemData!.MapWidth;
        var scaleY = (double)_canvasHeight / ProblemData.MapHeight;

        var scaledX = x * scaleX;
        var scaledY = y * scaleY;

        return (scaledX, scaledY);
    }

}