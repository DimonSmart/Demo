@using Demo.Demos.MazeRunner
@using DimonSmart.MazeGenerator

<div style="position: relative; width: 20px; height: 20px;
            background-color: @(GetCellColor());
            font-weight: bold; display: flex; align-items: center;
            justify-content: center; font-size: 14px; line-height: 1;"
     @onclick="HandleLeftClick"
@oncontextmenu:preventDefault
     @oncontextmenu="HandleRightClick">
    @GetCellContent()

    @if (Robot != null && Robot.X == X && Robot.Y == Y)
    {
        <span style="position: absolute; top: 0; left: 0; width: 100%; height: 100%;
                     display: flex; align-items: center; justify-content: center; pointer-events: none;">
            🤖
        </span>
    }
</div>


@code {
    [Parameter] public int X { get; set; }
    [Parameter] public int Y { get; set; }
    [Parameter] public MazeRunnerCellModel Cell { get; set; } = null!;
    [Parameter] public EventCallback<(int X, int Y, string Button)> OnCellClick { get; set; }

    [CascadingParameter] public Robot? Robot { get; set; }

    private string GetCellContent()
    {
        if (Cell.IsApple())
        {
            return "🍎"; // Apple
        }
        if (Cell.IsPear())
        {
            return "🍐"; // Pear
        }
        return string.Empty;
    }

    private string GetCellColor()
    {
        // All cells are visible: black for walls, white for passages
        return Cell.IsWall() ? "black" : "white";
    }

    private async Task HandleLeftClick(MouseEventArgs e)
    {
        if (!OnCellClick.HasDelegate)
            return;
        await OnCellClick.InvokeAsync((X, Y, "left"));
    }

    private async Task HandleRightClick(MouseEventArgs e)
    {
        if (!OnCellClick.HasDelegate)
            return;
        await OnCellClick.InvokeAsync((X, Y, "right"));
    }
}
