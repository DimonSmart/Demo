@using System.Text.RegularExpressions
@using System.Collections.ObjectModel
@using Demo.Demos.MazeRunner
@inject IJSRuntime JSRuntime

<div class="log-viewer-container" style="display: flex; flex-direction: column; border: 1px solid #ccc; height: 100%; max-width: 100%; word-break: break-word; overflow-wrap: break-word;">
    <!-- Top control bar -->
    <div class="d-flex flex-wrap align-items-center p-2 border-bottom gap-2">
        @if (ShowClearButton)
        {
            <button class="btn btn-secondary btn-sm rounded" @onclick="ClearLog">
                Clear
            </button>
        }
        @if (ShowSearchBox)
        {
            <div>
                <input type="text"
                       class="form-control form-control-sm d-inline-block"
                       style="width: 150px;"
                       @bind="SearchQuery"
                       @bind:event="oninput"
                       placeholder="highlight..." />
            </div>
        }
        @if (ShowAutoScroll)
        {
            <div class="form-check">
                <input class="form-check-input" type="checkbox" @bind="AutoScroll" />
                <label class="form-check-label">Auto</label>
            </div>
        }
        @if (ShowCompactToggle)
        {
            <div class="form-check">
                <input class="form-check-input" type="checkbox" @bind="CompactView" />
                <label class="form-check-label">Compact</label>
            </div>
        }
    </div>

    <div @ref="LogContainer"
         id="logContainer"
         class="p-2"
         style="overflow-y: scroll; min-height: 0; min-width: 0; font-family: monospace; white-space: pre-wrap; overflow-wrap: break-word; height: 100%;">
        <div>
            @foreach (var log in LogMessages)
            {
                var messageText = CompactView ? Regex.Replace(log.Message, @"\s+", " ") : log.Message;
                switch (log.Type)
                {
                    case LogStore.LogType.SemanticKernel:
                        <div style="font-size: 0.8em; color: #666; margin-bottom: 4px;">
                            @RenderLogMessage(messageText)
                        </div>
                        break;
                    case LogStore.LogType.RobotMovements:
                        <div style="font-size: 1em; color: blue; margin-bottom: 4px;">
                            @RenderLogMessage(messageText)
                        </div>
                        break;
                    case LogStore.LogType.UserInput:
                    default:
                        <div style="font-size: 1em; color: black; margin-bottom: 4px;">
                            @RenderLogMessage(messageText)
                        </div>
                        break;
                }
            }
        </div>
    </div>


</div>

@code {
    [Parameter]
    public ObservableCollection<LogStore.LogMessage> LogMessages { get; set; } = new ObservableCollection<LogStore.LogMessage>();

    [Parameter]
    public bool ShowClearButton { get; set; } = true;
    [Parameter]
    public bool ShowSearchBox { get; set; } = true;
    [Parameter]
    public bool ShowAutoScroll { get; set; } = true;
    [Parameter]
    public bool ShowCompactToggle { get; set; } = true;

    private string LogContent => string.Join("\n", LogMessages);
    private bool AutoScroll { get; set; } = true;
    private bool CompactView { get; set; }
    private string SearchQuery { get; set; } = "";

    private ElementReference LogContainer;
    private string DisplayedLog =>
        CompactView
            ? string.Join("\n", LogMessages.Select(m => Regex.Replace(m.Message, @"\s+", " ")))
            : LogContent;

    private bool _scrollRequested;

    protected override void OnInitialized()
    {
        LogMessages.CollectionChanged += (s, e) =>
        {
            if (AutoScroll)
            {
                _scrollRequested = true;
            }
            InvokeAsync(StateHasChanged);
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_scrollRequested)
        {
            _scrollRequested = false;
            await ScrollToBottom();
        }
    }

    private async Task ScrollToBottom()
    {
        await JSRuntime.InvokeVoidAsync("scrollToBottom", LogContainer);
    }

    private void ClearLog()
    {
        LogMessages.Clear();
    }

    private string HighlightLog(string text, string search)
    {
        if (string.IsNullOrEmpty(search))
        {
            return text;
        }

        var pattern = Regex.Escape(search);
        return Regex.Replace(text, pattern,
            match => $"<span style=\"background-color: yellow;\">{match.Value}</span>",
            RegexOptions.IgnoreCase);
    }

    private RenderFragment RenderLogMessage(string messageText) => builder =>
    {
        if (!string.IsNullOrEmpty(SearchQuery))
        {
            builder.AddMarkupContent(0, HighlightLog(messageText, SearchQuery));
        }
        else
        {
            builder.AddContent(1, messageText);
        }
    };

}
