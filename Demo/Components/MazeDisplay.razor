@using DimonSmart.MazeGenerator
@typeparam TCell where TCell : ICell


@if (Maze != null)
{
    <div style="display: grid; grid-template-columns: repeat(@Maze.Width, 20px); gap: 1px;">
        @for (var y = 0; y < Maze.Height; y++)
        {
            for (var x = 0; x < Maze.Width; x++)
            {
                @CellTemplate(new CellContext<TCell>
                   {
                       X = x,
                       Y = y,
                       Cell = Maze[x, y]
                   })
            }
        }
    </div>
}
else
{
    <p>Loading maze...</p>
}


@code {
    [Parameter]
    public IMaze<TCell>? Maze { get; set; }

    [Parameter]
    public EventCallback<(int X, int Y, string Button)> OnMazeCellClick { get; set; }

    private async Task HandleCellClick((int X, int Y, string Button) cellClickInfo)
    {
        if (OnMazeCellClick.HasDelegate)
        {
            await OnMazeCellClick.InvokeAsync(cellClickInfo);
        }
    }
}
