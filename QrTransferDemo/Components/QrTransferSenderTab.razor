<style>
    .drop-zone {
        position: relative;
        border: 2px dashed var(--bs-primary);
        border-radius: 0.5rem;
        min-height: 180px;
        display: flex;
        align-items: center;
        justify-content: center;
        text-align: center;
        transition: background-color 0.2s ease-in-out;
    }

    .drop-zone.dragging {
        background-color: rgba(13, 110, 253, 0.15);
    }

    .drop-zone .file-input {
        position: absolute;
        inset: 0;
        opacity: 0;
        cursor: pointer;
    }

    .drop-zone-content {
        pointer-events: none;
    }

    .qr-preview {
        aspect-ratio: 1;
        background-color: var(--bs-gray-100);
        border-radius: 0.5rem;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        gap: 0.75rem;
        padding: 0.5rem;
    }

    .qr-frame {
        width: min(90vmin, 100%);
        aspect-ratio: 1;
        max-width: 100%;
        max-height: 100%;
    }

    .qr-frame svg {
        width: 100%;
        height: 100%;
    }

    .transmission-card.fullscreen {
        position: fixed;
        inset: 0;
        z-index: 1050;
        border-radius: 0;
        margin: 0;
        display: flex;
        flex-direction: column;
    }

    .transmission-card.fullscreen .card-body {
        flex: 1;
        display: flex;
        flex-direction: column;
        padding: 2rem;
    }

    .transmission-card.fullscreen .transmission-layout {
        flex: 1;
    }

    .transmission-card.fullscreen .transmission-layout .col-lg-6 {
        display: flex;
        flex-direction: column;
    }

    .transmission-card.fullscreen .qr-preview {
        flex: 1;
        padding: 1.5rem;
    }

    .transmission-card.fullscreen .qr-frame {
        width: min(90vmin, 100%);
        height: min(90vmin, 100%);
    }

    .qr-payload {
        align-self: stretch;
        text-align: center;
    }

    .transmission-card.fullscreen .transmission-details {
        max-height: 100%;
        overflow-y: auto;
    }
</style>

<div class="card mb-4">
    <div class="card-header">Files</div>
    <div class="card-body">
        <div class="drop-zone mb-3 @( _isDragging ? "dragging" : string.Empty)"
             @ondragenter="OnDragEnter"
             @ondragenter:stopPropagation="true"
             @ondragenter:preventDefault="true"
             @ondragleave="OnDragLeave"
             @ondragleave:stopPropagation="true"
             @ondragleave:preventDefault="true"
             @ondragover="OnDragOver"
             @ondragover:preventDefault="true"
             @ondrop="OnDrop"
             @ondrop:preventDefault="true">
            <InputFile OnChange="HandleFilesSelectedAsync"
                       Multiple
                       class="file-input" />
            <div class="drop-zone-content">
                <p class="mb-1">Drag and drop files here</p>
                <p class="mb-0">or click to browse</p>
            </div>
        </div>
        @if (!string.IsNullOrEmpty(_validationMessage))
        {
            <div class="text-danger mb-2">@_validationMessage</div>
        }
        <div class="row g-3">
            <div class="col-sm-6 col-lg-3">
                <label class="form-label">QR version</label>
                <InputSelect @bind-Value="SelectedQrVersion" class="form-select">
                    @foreach (var version in SupportedVersions)
                    {
                        <option value="@version">@($"Version {version}")</option>
                    }
                </InputSelect>
            </div>
            <div class="col-sm-6 col-lg-3">
                <label class="form-label">Frame duration (ms)</label>
                <InputNumber @bind-Value="FrameDuration" class="form-control" min="50" max="5000" step="10" />
            </div>
            <div class="col-sm-6 col-lg-3">
                <label class="form-label">Error correction</label>
                <InputSelect @bind-Value="CorrectionLevel" class="form-select">
                    @foreach (var option in AvailableCorrectionLevels)
                    {
                        <option value="@option.Code" title="@option.Hint">@option.Label</option>
                    }
                </InputSelect>
            </div>
            <div class="col-sm-6 col-lg-3">
                <label class="form-label">Payload size (bytes)</label>
                <input type="number" class="form-control" value="@ChunkSize" readonly />
            </div>
        </div>
    </div>
</div>

<div class="card mb-4">
    <div class="card-header">Queue</div>
    <div class="card-body">
        @if (_queue.Count == 0)
        {
            <div class="alert alert-secondary mb-0">Queue is empty.</div>
        }
        else
        {
            <div class="table-responsive">
                <table class="table table-sm align-middle">
                    <thead>
                        <tr>
                            <th scope="col">File</th>
                            <th scope="col" class="text-end">Size</th>
                            <th scope="col" class="text-end">Chunks</th>
                            <th scope="col" class="text-end">Progress</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var file in _queue)
                        {
                            <tr class="@(ReferenceEquals(file, CurrentFile) ? "table-primary" : string.Empty)">
                                <td>@file.Name</td>
                                <td class="text-end">@FileSizeFormatter.Format(file.Size)</td>
                                <td class="text-end">@(file.Packets?.Count ?? 0)</td>
                                <td class="text-end">
                                    @if (file.Packets is null || file.Packets.Count == 0)
                                    {
                                        <span class="badge bg-secondary">Pending</span>
                                    }
                                    else
                                    {
                                        var percentage = file.Packets.Count == 0 ? 0 : (int)Math.Round(file.NextChunkIndex * 100d / file.Packets.Count);
                                        <span class="badge @(file.IsCompleted ? "bg-success" : "bg-primary")">@percentage%</span>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </div>
</div>

<div class="card transmission-card @(_isFullscreen ? "fullscreen" : string.Empty)">
    <div class="card-header d-flex align-items-center @( _isRunning ? "justify-content-end" : "justify-content-between")">
        @if (!_isRunning)
        {
            <span>Transmission</span>
        }
        <span class="badge @GetTransmissionBadgeClass()">@GetTransmissionStatus()</span>
    </div>
    <div class="card-body">
        <div class="row g-3 transmission-layout">
            <div class="col-lg-6">
                <div class="qr-preview">
                    @if (!string.IsNullOrEmpty(_currentQrMarkup))
                    {
                        @((MarkupString)_currentQrMarkup)
                        @if (!string.IsNullOrEmpty(_currentPayloadHex))
                        {
                            <div class="qr-payload small text-break text-muted font-monospace">@_currentPayloadHex</div>
                        }
                    }
                    else
                    {
                        <span class="text-muted">No frame</span>
                    }
                </div>
            </div>
            <div class="col-lg-6 transmission-details">
                <dl class="row mb-3">
                    <dt class="col-sm-4">Current</dt>
                    <dd class="col-sm-8">@(CurrentFile?.Name ?? "—")</dd>
                    <dt class="col-sm-4">Progress</dt>
                    <dd class="col-sm-8">
                        @if (CurrentFile?.Packets is { } packets)
                        {
                            <span>@CurrentFile!.NextChunkIndex / @packets.Count</span>
                        }
                        else
                        {
                            <span>0 / 0</span>
                        }
                    </dd>
                    <dt class="col-sm-4">Next</dt>
                    <dd class="col-sm-8">@(NextFile?.Name ?? "—")</dd>
                </dl>
                @if (!string.IsNullOrEmpty(_transmissionError))
                {
                    <div class="alert alert-danger" role="alert">@_transmissionError</div>
                }
                <div class="btn-toolbar gap-2" role="toolbar">
                    <div class="btn-group">
                        <button class="btn btn-primary" @onclick="StartAsync" disabled="@StartDisabled">Start</button>
                        <button class="btn btn-outline-primary" @onclick="Pause" disabled="@(!_isRunning)">Pause</button>
                    </div>
                    <div class="btn-group">
                        <button class="btn btn-outline-secondary" @onclick="RestartAsync" disabled="@(!_canRestart)">Restart</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
